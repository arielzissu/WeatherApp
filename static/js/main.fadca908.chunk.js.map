{"version":3,"sources":["store/actions/favoriteAction.js","services/location.service.ts","models/weather.model.ts","utils/styledComponents.util.tsx","cmps/weaderCardsList.cmp.tsx","assets/imgs/sun.png","cmps/weatherCardDetails.cmp.tsx","pages/weather.page.tsx","utils/getRundomNumber.util.ts","cmps/favoriteCardList.cmp.tsx","pages/favorite.page.tsx","routes/route.tsx","cmps/navBar.cmp.tsx","store/actions/darkModeAction.js","App.tsx","reportWebVitals.js","store/reducers/favoriteReducer.js","store/reducers/darkModeReducer.js","store/index.js","index.js"],"names":["saveFavorite","favorite","dispatch","a","type","API_KEY","TEL_AVIV_LOCATION_KEY","LocationService","errorHandler","locationKey","axios","get","res","q","defaultLocationOptionTLV","WeaderCard","styled","Box","FavoriteCard","StyledCard","Card","WeaderCardsList","props","daysOfDailyForecasts","map","d","idx","dayjs","Date","format","Temperature","Maximum","Value","Unit","WeatherCardDetails","isDarkMode","currentWeather","currentLocationOption","canRenderCardDetails","isFavoriteWeather","handleAddToFavorite","variant","style","backgroundColor","color","className","display","alignItems","mr","src","weatherImg","alt","width","height","LocalizedName","Metric","Button","onClick","Favorite","htmlColor","textAlign","mb","fontSize","fontWeight","mapDispatchToProps","addFavorite","connect","state","favorites","currentFavorite","darkMode","useState","isOpenAlertWarning","setIsOpenAlertWarning","errorText","setErrorText","searchLocationInput","setSearchLocationInput","locationsOptions","setLocationsOptions","undefined","setCurrentLocationOption","setCurrentWeather","setDaysOfDailyForecasts","err","description","setTimeout","getCurrentWeather","currentWeatherData","data","handleGetDaysOfDailyForecasts","value","getDaysOfDailyForecasts","Key","DailyForecasts","getDefaultWeatherOfTLV","getDefaultWeatherOfFavorite","key","useEffect","onChangeInput","e","target","getLocationsOptions","onChangeAutoComplete","find","f","length","Autocomplete","options","freeSolo","defaultValue","onChange","getOptionLabel","option","renderInput","params","TextField","label","newFavorite","id","min","max","Math","floor","random","Collapse","in","position","bottom","left","padding","Alert","severity","action","IconButton","aria-label","size","Close","FavoriteCardsList","favoritesData","onDeleteFavorite","onClickFavoriteCard","Tooltip","title","favoriteId","stopPropagation","onHandleDeleteFavorite","deleteFavorite","setFavoritesData","history","useHistory","push","Routes","WEATHER","ROOT","FAVORITE","routes","path","render","to","component","WeatherPage","FavoritePage","RoutesSwitch","exact","updateIsDarkMode","currTab","setCurrTab","isNightMode","setIsNightMode","justifyContent","Tabs","indicatorColor","textColor","newValue","Tab","icon","Cloud","FormControlLabel","control","Switch","checked","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","filter","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fadca908.chunk.js","sourcesContent":["\nexport function addFavorite(favorite) {\n    return async dispatch => {\n        dispatch({ type: 'ADD_FAVORITE', favorite });\n        return favorite;\n    }\n}\n\nexport function deleteFavorite(favoriteId) {\n    return async dispatch => {\n        dispatch({ type: 'DELETE_FAVORITE', favoriteId })\n    }\n}\nexport function saveFavorite(favorite) {\n    return async dispatch => {\n        dispatch({ type: 'SAVE_FAVORITE', favorite });\n        return favorite;\n    }\n}","import axios from 'axios';\nimport { LocationsOptions } from '../locationsOptions';\nimport { telAvivWeather } from '../telAvivWeather';\nimport { getDaysOfDailyForecasts } from '../daysOfDailyForecasts';\nimport { CurrentWeatherObj } from '../models/weather.model';\n\nconst API_KEY = 'EjKAgOHhI2MH8N5AeybQr3ObfyI5rflV';\nconst TEL_AVIV_LOCATION_KEY = '215854';\n\n\nexport class LocationService {\n\n    static async getCurrentWeather(errorHandler: (err: string, description: string)=>void, locationKey?: string) {\n        try {\n            // const res = {data: telAvivWeather as CurrentWeatherObj[]}; //DEMO DATA\n            const res = await axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${locationKey ?? TEL_AVIV_LOCATION_KEY}?apikey=${API_KEY}`)\n            return res;\n        } catch (err) {\n            errorHandler(err, 'Faild to fetch Current weather data');\n        }\n    }\n\n    static async getLocationsOptions(q: string, errorHandler: (err:string, description: string)=>void) {\n        try {\n            // const res = LocationsOptions as any; //DEMO DATA\n            const res = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${q}&language=en-us`)\n            return res;\n        } catch (err) {\n            errorHandler(err, 'Faild to fetch locations options data');\n        }\n    }\n\n    static async getDaysOfDailyForecasts(errorHandler: (err:string, description: string)=>void, locationKey?: string) {\n        try {\n            // const res = getDaysOfDailyForecasts as any; //DEMO DATA\n            const res = await axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey ?? TEL_AVIV_LOCATION_KEY}?apikey=${API_KEY}`)\n            return res;\n        } catch (err) {\n            errorHandler(err, 'Faild to fetch days of daily forecasts data');\n        }\n    }\n\n}\n","export type TemperatureObj = {\n    Metric: {\n        Value: number,\n        Unit: string,\n        UnitType: number\n    },\n    Imperial: {\n        Value: number,\n        Unit: string,\n        UnitType: number\n    }\n}\n\nexport type CurrentWeatherObj = {\n    LocalObservationDateTime: string,\n    EpochTime: number,\n    WeatherText: string,\n    WeatherIcon: number,\n    HasPrecipitation: boolean,\n    PrecipitationType: any,\n    IsDayTime: boolean,\n    Temperature: TemperatureObj,\n    MobileLink: string,\n    Link: string,\n}\n\nexport type LocationOptionsObj = {\n    Version: number,\n    Key: string,\n    Type: string,\n    Rank: number,\n    LocalizedName: string,\n    Country: {\n        ID: string,\n        LocalizedName: string,\n    },\n    AdministrativeArea: {\n        ID: string,\n        LocalizedName: string,\n    }\n}\nexport type DailyForecastsObj = {\n        Date: string,\n        EpochDate: number,\n        Temperature: {\n            Minimum: {\n                Value: number,\n                Unit: string,\n                UnitType: number,\n            },\n            Maximum: {\n                Value: number,\n                Unit: string,\n                UnitType: number,\n            }\n        },\n        Day: {\n            Icon: number,\n            IconPhrase: string,\n            HasPrecipitation: boolean,\n            PrecipitationType: string,\n            PrecipitationIntensity: string,\n        },\n        Night: {\n            Icon: number,\n            IconPhrase: string,\n            HasPrecipitation: boolean,\n            PrecipitationType: string,\n            PrecipitationIntensity: string,\n        },\n        Sources: string[],\n        MobileLink: string,\n        Link: string,\n}\n\nexport type DailyForecastsData = {\n    Headline: {\n        EffectiveDate: string,\n        EffectiveEpochDate: number,\n        Severity: number,\n        Text: string,\n        Category: any,\n        EndDate: string,\n        EndEpochDate: number,\n        MobileLink: string,\n        Link: string,\n    },\n    DailyForecasts: DailyForecastsObj[],\n}\n\nexport const defaultLocationOptionTLV: LocationOptionsObj = {\n    \"Version\": 1,\n    \"Key\": \"215854\",\n    \"Type\": \"City\",\n    \"Rank\": 31,\n    \"LocalizedName\": \"Tel Aviv\",\n    \"Country\": {\n        \"ID\": \"IL\",\n        \"LocalizedName\": \"Israel\"\n    },\n    \"AdministrativeArea\": {\n        \"ID\": \"TA\",\n        \"LocalizedName\": \"Tel Aviv\"\n    }\n};\n\nexport type FavoriteObj = {\n    id: number,\n    LocalizedName: string,\n    Key: string,\n    Temperature: TemperatureObj,\n}","import styled from 'styled-components';\nimport { Box, Card } from '@material-ui/core';\n\nexport const WeaderCard = styled(Box)` && {\n    border: 1px solid black;\n    padding: 20px;\n    min-width: 150px;\n    min-height: 200px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    border-radius: 5px;\n    margin-right: 10px;\n    @media screen and (max-width: 1140px) {\n        width: 60%;\n        margin-right: 0;\n        margin-bottom: 20px;\n    }\n}`;\n\nexport const FavoriteCard = styled(WeaderCard)` && {\n    position: relative;\n    margin-right: 0;\n    cursor: pointer;\n    &:hover {\n        background-color: #eee;\n    }\n}`;\n\nexport const StyledCard = styled(Card)` && {\n    padding: 40px;\n    min-height: 60%;\n    @media screen and (max-width: 900px) {\n        padding: 10px;\n    }\n}`;","import React from 'react';\nimport dayjs from 'dayjs';\nimport { Box } from '@material-ui/core';\nimport { DailyForecastsObj } from '../models/weather.model';\nimport { WeaderCard } from '../utils/styledComponents.util';\n\n\nexport type Props = {\n    daysOfDailyForecasts: DailyForecastsObj[];\n};\n\nexport default function WeaderCardsList(props: Props) {\n    const { daysOfDailyForecasts } = props;\n\n    return (\n        <>\n            {daysOfDailyForecasts.map((d, idx) => (\n                <WeaderCard key={idx}>\n                    <Box>{dayjs(d.Date).format('ddd')}</Box>\n                    <Box>{d.Temperature.Maximum.Value} {d.Temperature.Maximum.Unit}</Box>\n                </WeaderCard>\n            ))}\n        </>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/sun.00bf46d2.png\";","import React from 'react';\nimport { StyledCard } from 'src/utils/styledComponents.util';\nimport { Box, Button } from '@material-ui/core';\nimport WeaderCardsList from './weaderCardsList.cmp';\nimport { Favorite } from '@material-ui/icons';\nimport weatherImg from '../assets/imgs/sun.png';\n\nexport type Props = {\n    daysOfDailyForecasts: any;\n    isDarkMode: any;\n    currentWeather: any;\n    currentLocationOption: any;\n    canRenderCardDetails: boolean;\n    handleAddToFavorite: () => void;\n    isFavoriteWeather: () => boolean;\n};\n\nexport default function WeatherCardDetails(props: Props) {\n\n    const { daysOfDailyForecasts, isDarkMode, currentWeather, currentLocationOption, canRenderCardDetails, isFavoriteWeather, handleAddToFavorite } = props;\n\n    return (\n        <StyledCard variant=\"outlined\" style={isDarkMode ? { backgroundColor: 'gray', color: 'white' } : {}}>\n            {canRenderCardDetails && currentLocationOption && (\n                <>\n                    <Box className=\"contain-header-weader-card\">\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <Box mr={2} className=\"weather-icon-contain\"><img src={weatherImg} alt=\"Weather\" style={{ width: 80, height: 80 }} /></Box>\n                            <Box>\n                                <Box>{currentLocationOption.LocalizedName}</Box>\n                                {\n                                    currentWeather &&\n                                    <Box>{currentWeather.Temperature.Metric.Value} {currentWeather.Temperature.Metric.Unit}</Box>\n                                }\n                            </Box>\n                        </Box>\n\n                        <Button className=\"add-favorite-btn\" style={isDarkMode ? { color: 'white' } : {}} onClick={handleAddToFavorite}><Favorite htmlColor={isFavoriteWeather() ? \"blue\" : \"\"} className=\"love-icon\" />Add to favorite</Button>\n                    </Box>\n\n                    {\n                        isFavoriteWeather() &&\n                        <Box textAlign=\"center\" mb={3}>\n                            <Box fontSize={'20px'} color=\"blue\" fontWeight=\"700\">In Favorite</Box>\n                        </Box>\n                    }\n\n                    <Box textAlign=\"center\" mb={3}>\n                        <Box fontSize={'20px'}>Scattered cloud</Box>\n                    </Box>\n\n                    <Box className=\"contain-cards\">\n                        <WeaderCardsList daysOfDailyForecasts={daysOfDailyForecasts} />\n                    </Box>\n                </>\n            )}\n        </StyledCard>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { Box, TextField, IconButton, Collapse } from '@material-ui/core';\nimport { Close } from '@material-ui/icons';\nimport { connect } from \"react-redux\";\nimport { addFavorite, saveFavorite } from '../store/actions/favoriteAction';\nimport { LocationService } from '../services/location.service';\nimport { Autocomplete, Alert } from '@material-ui/lab';\nimport { LocationOptionsObj, defaultLocationOptionTLV, CurrentWeatherObj, DailyForecastsObj } from '../models/weather.model';\nimport { getRandomArbitrary } from '../utils/getRundomNumber.util';\nimport WeatherCardDetails from '../cmps/weatherCardDetails.cmp';\n\n\nexport function WeatherPage(props: any) {\n    const [isOpenAlertWarning, setIsOpenAlertWarning] = useState<boolean>(false);\n    const [errorText, setErrorText] = useState<string>('');\n\n    const [searchLocationInput, setSearchLocationInput] = useState<string>('');\n\n    const [locationsOptions, setLocationsOptions] = useState<LocationOptionsObj[]>([]);\n    const [currentLocationOption, setCurrentLocationOption] = useState<LocationOptionsObj>(props.currentFavorite ? undefined : defaultLocationOptionTLV);\n    const [currentWeather, setCurrentWeather] = useState<CurrentWeatherObj>(null);\n    const [daysOfDailyForecasts, setDaysOfDailyForecasts] = useState<DailyForecastsObj[]>(null);\n\n    const errorHandler = (err: string, description: string) => {\n        setErrorText(description);\n        setIsOpenAlertWarning(true);\n        setTimeout(() => {\n            setIsOpenAlertWarning(false);\n        }, 5000);\n    }\n\n    const getCurrentWeather = async (locationKey?: string) => {\n        const res = await LocationService.getCurrentWeather(errorHandler, locationKey);\n        const currentWeatherData = res?.data[0];\n        setCurrentWeather(currentWeatherData);\n    }\n    const handleGetDaysOfDailyForecasts = async (value?: LocationOptionsObj) => {\n        const res = await LocationService.getDaysOfDailyForecasts(errorHandler, value?.Key);\n        setDaysOfDailyForecasts(res?.data?.DailyForecasts);\n    }\n\n    const getDefaultWeatherOfTLV = async () => {\n        await getCurrentWeather();\n        await handleGetDaysOfDailyForecasts();\n    }\n    const getDefaultWeatherOfFavorite = async () => {\n        const { currentFavorite } = props;\n        await getCurrentWeather(currentFavorite.key);\n        await handleGetDaysOfDailyForecasts(currentFavorite);\n        setCurrentLocationOption(currentFavorite);\n        props.saveFavorite(null);\n    }\n\n    useEffect(() => {\n        if (props.currentFavorite) {\n            getDefaultWeatherOfFavorite();\n        } else {\n            getDefaultWeatherOfTLV();\n        }\n    }, [props.currentFavorite])\n\n    const onChangeInput = async (e) => {\n        const { value } = e.target;\n        setSearchLocationInput(value);\n        if (value) {\n            const res = await LocationService.getLocationsOptions(value, errorHandler);\n            setLocationsOptions(res?.data);\n        }\n    }\n\n    const onChangeAutoComplete = async (e: any, value: LocationOptionsObj) => {\n        setCurrentLocationOption(value);\n        await handleGetDaysOfDailyForecasts(value);\n    }\n\n    const isFavoriteWeather = () => {\n        const currFavoriteWeather = props.favorites.find(f => f.LocalizedName === currentLocationOption?.LocalizedName)\n        return !!currFavoriteWeather;\n    }\n\n    const handleAddToFavorite = () => {\n        if (!isFavoriteWeather()) {\n            const newFavorite = {\n                id: getRandomArbitrary(1, 999999),\n                LocalizedName: currentLocationOption.LocalizedName,\n                Key: currentLocationOption.Key,\n                Temperature: currentWeather.Temperature,\n            }\n            props.addFavorite(newFavorite);\n        }\n    }\n\n    const canRenderCardDetails = !!(daysOfDailyForecasts && (searchLocationInput?.length > 0 || currentLocationOption));\n\n\n    return (\n        <Box height=\"100%\">\n            <Box className=\"autocomplete-contain\">\n                <Autocomplete\n                    options={locationsOptions}\n                    freeSolo={true}\n                    defaultValue={props.currentFavorite ?? defaultLocationOptionTLV}\n                    onChange={onChangeAutoComplete}\n                    getOptionLabel={(option) => option?.LocalizedName ?? ''}\n                    style={{ width: 300 }}\n                    renderInput={(params) => (\n                        <TextField {...params} label=\"Add city name\" value={searchLocationInput} onChange={onChangeInput} />\n                    )}\n                />\n            </Box>\n\n            <WeatherCardDetails\n                daysOfDailyForecasts={daysOfDailyForecasts}\n                isDarkMode={props.isDarkMode}\n                currentWeather={currentWeather}\n                currentLocationOption={currentLocationOption}\n                canRenderCardDetails={canRenderCardDetails}\n                handleAddToFavorite={handleAddToFavorite}\n                isFavoriteWeather={isFavoriteWeather}\n            />\n\n\n            <Collapse in={isOpenAlertWarning} style={{ position: 'fixed', bottom: 10, left: 10, padding: 10 }}>\n                <Alert\n                    severity=\"error\"\n                    action={\n                        <IconButton\n                            aria-label=\"close\"\n                            color=\"inherit\"\n                            size=\"small\"\n                            onClick={() => {\n                                setIsOpenAlertWarning(false);\n                            }}\n                        >\n                            <Close fontSize=\"inherit\" />\n                        </IconButton>\n                    }\n                >\n                    {errorText}\n                </Alert>\n            </Collapse>\n\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    favorites: state.favorite.favorites,\n    currentFavorite: state.favorite.currentFavorite,\n    isDarkMode: state.darkMode.isDarkMode,\n});\n\nconst mapDispatchToProps = {\n    addFavorite,\n    saveFavorite\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherPage);\n","export const getRandomArbitrary = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min) + min);\n}","import React from 'react';\nimport { Box, Tooltip } from '@material-ui/core';\nimport { FavoriteCard } from 'src/utils/styledComponents.util';\nimport { FavoriteObj } from 'src/models/weather.model';\nimport { Close } from '@material-ui/icons';\n\nexport type Props = {\n    favoritesData: FavoriteObj[];\n    onDeleteFavorite: (favoriteId: number) => void;\n    onClickFavoriteCard: (favorite: FavoriteObj) => void;\n};\n\nexport default function FavoriteCardsList(props: Props) {\n    const { favoritesData, onDeleteFavorite, onClickFavoriteCard } = props;\n\n    const onHandleDeleteFavorite = (e: any, favoriteId: number) => {\n        e.stopPropagation();\n        onDeleteFavorite(favoriteId);\n    }\n\n    const onHandleClickFavoriteCard = (favorite: FavoriteObj) => {\n        onClickFavoriteCard(favorite);\n    }\n\n\n    return (\n        <>\n            {\n                favoritesData.length > 0 ? (\n                    favoritesData.map(d => (\n                        <FavoriteCard key={d.id} onClick={() => onHandleClickFavoriteCard(d)}>\n                            <Tooltip title=\"Delete\">\n                                <Close className=\"close-icon\" onClick={(e) => onHandleDeleteFavorite(e, d.id)} />\n                            </Tooltip>\n                            <Box>{d.LocalizedName}</Box>\n                            <Box>{d.Temperature.Metric.Value} {d.Temperature.Metric.Unit}</Box>\n                        </FavoriteCard>\n                    )))\n                    : (\n                        <Box>\n                            <Box>Empty favorite...</Box>\n                        </Box>\n                    )\n            }\n        </>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Box } from '@material-ui/core';\nimport { deleteFavorite, saveFavorite } from '../store/actions/favoriteAction';\nimport { FavoriteObj } from '../models/weather.model';\nimport FavoriteCardsList from '../cmps/favoriteCardList.cmp';\nimport { Routes } from '../routes/route';\n\nexport function FavoritePage(props: any) {\n    const [favoritesData, setFavoritesData] = useState<FavoriteObj[]>([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (props.favorites) {\n            setFavoritesData(props.favorites);\n        }\n    }, [props.favorites]);\n\n    const onDeleteFavorite = (favoriteId: number) => {\n        props.deleteFavorite(favoriteId);\n    }\n\n    const onClickFavoriteCard = (favorite: FavoriteObj) => {\n        history.push(Routes.WEATHER);\n        props.saveFavorite(favorite);\n    }\n\n    return (\n        <Box className=\"container-favorite-cards\">\n            <FavoriteCardsList\n                favoritesData={favoritesData}\n                onDeleteFavorite={onDeleteFavorite}\n                onClickFavoriteCard={onClickFavoriteCard}\n            />\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    favorites: state.favorite.favorites,\n});\n\nconst mapDispatchToProps = {\n    deleteFavorite,\n    saveFavorite\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoritePage);\n","import React from 'react';\nimport { Route, Switch, RouteComponentProps, Redirect } from 'react-router-dom';\nimport WeatherPage from '../pages/weather.page';\nimport FavoritePage from '../pages/favorite.page';\n\ntype InternalRoute = {\n    component?: React.ComponentType<any>;\n    render?: (props: RouteComponentProps<any>) => React.ReactNode;\n    path: string;\n    exact?: boolean;\n    title: string;\n};\n\nexport const Routes = {\n    ROOT: '/',\n    WEATHER: '/WeatherApp',\n    FAVORITE: '/favorite',\n};\n\nconst routes: InternalRoute[] = [\n    {\n        path: Routes.ROOT,\n        render: () => <Redirect to={Routes.WEATHER} />,\n        title: 'MDC Dashboard',\n    },\n    {\n        path: Routes.WEATHER,\n        component: WeatherPage,\n        title: 'Weather',\n    },\n    {\n        path: Routes.FAVORITE,\n        component: FavoritePage,\n        title: 'Favorite',\n    },\n];\n\nexport function RoutesSwitch() {\n\n    return (\n        <Switch>\n            {routes.map(({ path, exact, render, component }) => {\n                return <Route key={path} exact={exact !== false} path={path} render={render} component={component} />;\n            })}\n        </Switch>\n    );\n}\n","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Tabs, Tab, FormControlLabel, Switch, Box } from '@material-ui/core';\nimport { Cloud, Favorite } from '@material-ui/icons';\nimport { Routes } from '../routes/route';\nimport { updateIsDarkMode } from '../store/actions/darkModeAction';\n\nfunction NavBar(props: any) {\n    const history = useHistory();\n    const [currTab, setCurrTab] = useState<number>(0);\n    const [isNightMode, setIsNightMode] = useState<boolean>(false);\n\n    const onClickTab = (e, newValue) => {\n        setCurrTab(newValue);\n        history.push(newValue === 0 ? Routes.WEATHER : Routes.FAVORITE);\n    }\n\n    const handleSetIsNightMode = () => {\n        setIsNightMode(!isNightMode);\n        props.updateIsDarkMode(!isNightMode);\n    }\n\n    return (\n        <Box display=\"flex\" justifyContent=\"space-between\">\n            <Tabs\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                value={currTab}\n                onChange={onClickTab}\n            >\n                <Tab icon={<Cloud />} label=\"Home\" />\n                <Tab icon={<Favorite />} label=\"Favorite\" />\n            </Tabs>\n\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={isNightMode}\n                        onChange={handleSetIsNightMode}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                    />\n                }\n                label=\"Dark mode\"\n            />\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    isDarkMode: state.darkMode.isDarkMode,\n});\n\nconst mapDispatchToProps = {\n    updateIsDarkMode\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","\nexport function updateIsDarkMode(isDarkMode) {\n    return async dispatch => {\n        dispatch({ type: 'UPDATE_DARK_MODE', isDarkMode });\n        return isDarkMode;\n    }\n}","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport '../src/styles/app.style.css';\nimport '../src/styles/weather.style.css';\nimport '../src/styles/favorite.style.css';\nimport { RoutesSwitch } from \"./routes/route\";\nimport NavBar from \"./cmps/navBar.cmp\";\n\nfunction App(props: any) {\n\n  const getDarkStyle = () => {\n    return props.isDarkMode ? { backgroundColor: 'lightgray', color: 'white' } : {};\n  }\n  \n  return (\n    <BrowserRouter>\n      <section className=\"app-container\">\n        <NavBar />\n        <main className=\"main-container\" style={getDarkStyle()}>\n          <RoutesSwitch />\n        </main>\n      </section>\n    </BrowserRouter>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  isDarkMode: state.darkMode.isDarkMode,\n});\n\nconst mapDispatchToProps = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\n    favorites: [],\n    currentFavorite: null,\n}\n\nexport default function FavoriteReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'ADD_FAVORITE':\n            return { ...state, favorites: [...state.favorites, action.favorite] };\n        case 'SAVE_FAVORITE':\n            return { ...state, currentFavorite: action.favorite };\n        case 'DELETE_FAVORITE':\n            return {\n                ...state,\n                favorites: state.favorites.filter(favorite => favorite.id !== action.favoriteId)\n            };\n        default:\n            return state;\n    };\n}","const initialState = {\n    isDarkMode: false,\n}\n\nexport default function DarkModeReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'UPDATE_DARK_MODE':\n            return { ...state, isDarkMode: action.isDarkMode };\n        default:\n            return state;\n    };\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport FavoriteReducer from './reducers/favoriteReducer';\nimport DarkModeReducer from './reducers/darkModeReducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst rootReducer = combineReducers({\n    favorite: FavoriteReducer,\n    darkMode: DarkModeReducer,\n});\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}